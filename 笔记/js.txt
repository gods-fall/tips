javascript

解释型

单线程

面向对象

script



/script

alert("")

console.log('')

document.write('')



引用 

<script src=""></script>

![image-20230716112659578](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230716112659578.png)

// /**/

;

声明变量

变量赋值

let/var块作用域

let a =10

 常量 

const

标识符



数据类型

数值number 

整数,浮点

infinity 特殊数字表示无穷

nan非法数字

大整数bigint

n结尾无限大

0b二进制



类型检查

typeof



字符串

''  ""

\转义

长字符串

嵌入变量

``



布尔 Boolean

bool=false 

bool=true



空值 空对象

null

未定义 

没有赋值就是undefined



符号 symbol

创建唯一标识

let c =symbol();



类型转换

tostring()

a.tostring()



tostring(b)



Number()

不合法nan



parseint

parsefloat



Boolean()



![image-20230716125817554](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230716125817554.png)



运算符



+- */%

不是相关类型自动转换

加法会拼接字符串



![image-20230716131310359](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230716131310359.png)

??=空赋值



取反

-+

自增减

++ --

逻辑

&& || !



关系 > =  < = ==  ===(不会自动类型转换 不等就false |  !=  !==(相反)

nan不予任何值相等



条件   运算符



t?gr:gt;





代码块 {}

对代码分组

let 不能访问外部 代码块





if ()

{}

prompt



![image-20230716141854139](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230716141854139.png)



for(;;){}死循环





对象 

let obj = object() /new object()/{} 直接添加,

obj.name=





![image-20230716160520807](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230716160520807.png)



![image-20230722113321508](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230722113321508.png)

'name' in obj 检查是否有

let obj = {name:"11",age:11}

循环遍历对象

for-in

for(let proname in 对象){

console.log(proname)}



函数 function





function 函数名 (){}



调用 fn()



函数表达式 

const 变量 = 函数{}



箭头 

const ol = () =>{}

参数 

.

箭头函数

.

定义参数可以指定默认值

函数参数

函数返回值

return 

箭头函数返回值

const sum = (a,b)=>a+b;/        ({对象名:""})



作用域

变量的可见区域

全局  /局部

生命周期  

网页运行时创建 关闭时销毁 全 

所有直接编写script标签中的代码 都位于全局

局部

块 作用域 

代码块执行创建 执行完毕销毁

函数作用域 

函数调用产生 调用结束销毁

每次都会产生新的作用域

局部变量 不能离开函数访问



作用域链

里向外就近原则

//

方法 

当对象的属性指向一个函数



Windows对象 

存储内置对象和宿主对象 

![image-20230716180431092](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230716180431092.png)



提升*

debug 

debugger

源代码



立即执行函数;

代码尽量编写局部 





只会调用一次 匿名函数

(function() {})



this 

隐含的参数

会指向对象 

根据函数指向的方向不同而不同

函数调用 this 指向 windows 

对象方法调用  this指向调用对象

![image-20230716182903728](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230716182903728.png)



![image-20230716183633915](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230716183633915.png)





箭头函数没有自己的this 由this的外作用域决定



严格模式 

"use strict;"



面向对象

类 class 类名 {}



new 类名 () 创建对象



 p1 instanceof Person 检查是不是类创建的//





静态方法类调用

static  

必须通过类调用



构造

constructor (name,b){

在构造里进行赋值

this.name = name 



}

会在调用类调用对象执行





封装

私有化属性 

添加#私有

getName (){

return this.#name

}

setname(name){

this.#name =name

}

get set 

多态

![image-20230717103308725](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717103308725.png)





继承 

extends 

在子类可以通过创建同名方法来重写父类方法

![image-20230717104531524](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717104531524.png)



重写父类构造

调用父类方法 

super.方法





![image-20230717104927447](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717104927447.png)

在方法可以同过super.调用父类的方法

原型对象(prototype)

对象中的属性存储的位置

![image-20230717114604476](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717114604476.png)

原型 的访问

p.__proto__

Object.getprototypeof(p)

![image-20230717115123218](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717115123218.png)





![image-20230717115406345](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717115406345.png)



![image-20230717115500220](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717115500220.png)





object 没有原型 null

原型作用



所有同类型对象 他们的原型对象都是同一个



公共区域,可以被所有该类实例访问





![image-20230717120204754](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717120204754.png)



p.__proto__=new dog()

类访问实例的原型 

类.prototype

继承通过原型

修改原型

instanceof    检查是对象的原型链是否有该类型

in 判断一个对象是否在类里

hasownproperty对象静态

object.hasown(p,"sayhello")



旧类

狗屎





new 运算符



![image-20230722172000617](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230722172000617.png)



数组

array 

是一种复合  存储多个不同类型的数据

存储有序的数据



const arr = new Array()

[]

索引 

index是大于0的整数



数组[]  = 元素

arr[arr.length]=

避免非连续 性能不好

数组遍历 



尽量确保数组中元素 类型相同



for-of 遍历 可迭代对象

for (变量 of 可迭代对象 ) {}

for(let value of arr ){

}

有几个元素执行几次



数组判断

array.isarray()检查是否是数组 

concat()用来连接数组

at() 可以接收负索引

indexof(,)获取索引

lastindexof() 获取元素第一次出现的索引

jion 把数组所有元素拼成字符串

slice(0,5)截取的起始位置 截取的结束位置 不包括该位置

如果两个参数都省略可以对对象浅拷贝



浅拷贝 对对象浅层进行复制 只是复制一层

如果存储是原始值 那么拷贝的深浅不重要



浅拷贝只会对对象本身进行复制 不会复制对象中的属性 或元素



深拷贝 

不仅复制对象本身 ,还复制对象中的属性

structureclone()



//

const arr3 = [...arr]

展开运算符

对象的复制

object.assign({},被复制的对象)

br

破坏性的



![image-20230717142850943](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717142850943.png)

splice ()

 1,2起始位置 数量    

返回被删除的元素 替换 插入

reverse()反转数组



数组去重

![image-20230717144544990](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717144544990.png)

![image-20230717144710682](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717144710682.png)

冒泡排序

选择排序

封装函数

cellback回调函数

函数作为参数

a =>a%2===0

函数作为函数传递

匿名





闭包 

![image-20230717165114530](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717165114530.png)



![image-20230717165323153](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717165323153.png)

词法作用域 一个函数的作用域在创建季定义好



生命周期

外部函数调用  

内部函数丢失时候销毁 内部函数被垃圾回收

类可以使用原型  闭包不能   比较浪费内存





递归

数组方法

sort() 排序

![image-20230717171532939](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717171532939.png)





foreach 遍历

![image-20230717171838204](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717171838204.png)



filter()遍历

![image-20230717172234280](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717172234280.png)

map复制

arr.map(ele=>ele)

arr.map(ele=>"li"+ele+"li"

![image-20230717172604998](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230717172604998.png)

reduce 整合成一个值

arr.reduce((a,b)=>

)



可变参数



arguments隐含参数



类数组对象

存储函数实参

不能用foreach遍历

不受参数限制传参

...args 可变参数  可以接收任意变量实参

argument[]

call 与apply指定this

fn.call()

调用.call () apply()来调用函数

的第一个参数成为函数的this

call调用函数 实参直接在第一个参数后一个一个列出

apply     实参 需要通过数组传递

bind

用来创建一个新的函数

![image-20230718111813063](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718111813063.png)



bind可以为新函数绑定tihs/绑定参数

![image-20230723145222100](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230723145222100.png)

箭头函数

没有自己的this 由外层作用域决定 不能通过bind apply决定





内建对象 

解构赋值 

![image-20230718113051357](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718113051357.png)







通过解构赋值快速交换

{} =obj

冒号指定别名



对象的序列化



序列化将对象转换为一个可用存储的格式

在js当中 通常是将一个对象转换为一个字符串

作用

在不同语言进行传递

可用直接对字符串进行读写操作

json工具类

![image-20230718123207789](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718123207789.png)

将obj json 

const str =json.stringify(obj) 对象转换成一个json字符串

const obj = json.parse(str) json格式的字符串转换为json对象



编写json字符串

const str2 = '{"name":"驻巴基","age":28}'

json两种类型



json对象 '{}'

json数组'[]'

![image-20230718124437828](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718124437828.png)





对json的深复制

![image-20230718124819709](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718124819709.png)





![image-20230718124927765](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718124927765.png)



Map 存储键值对



![image-20230718125121646](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718125121646.png)





任何数据的值都可以成为key

![image-20230718125437721](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718125437721.png)









map.get(key)

delete()

has 检查

clear删除all

![image-20230718125951192](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718125951192.png)





遍历map

![image-20230718130156651](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718130156651.png)



![image-20230718130238355](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718130238355.png)





map.keys()

map.values();

array.from(map)



set

![image-20230718130439254](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718130439254.png)

set.add()

has

size 

delete

![image-20230718130637680](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718130637680.png)





/math

是一个工具类

提供数学运算的常量和方法

math.pi

方法 

mdn/



date

new date"//"

gettime 时间戳1970

Date.now()当前时间



时间的格式化

![image-20230718134843215](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718134843215.png)





第三个方法 传参 zh-CN

​                    对象

![image-20230718135327347](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718135327347.png)

long medium short

mdn



包装类

str  = new String("给你![012A75E2](C:\Users\link\AppData\Local\Temp\SGPicFaceTpBq\2588\012A75E2.png)一拳")

![image-20230718135746020](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718135746020.png)



![image-20230718135853425](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718135853425.png)





![image-20230718140239707](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718140239707.png)





![image-20230718140740566](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718140740566.png)





字符串的方法

本质是一个数组

[]

at()

concat ()连接

include()检查是否包含

![image-20230718141600122](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718141600122.png)



replace (,)

replace(,)all

slice 

/substring

split()

根据关键词将一个字符串拆分成一个数组



正则表达式

用来定义描述字符串的规则

构造创建

let reg = new regexp("a","i")![image-20230723160727044](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230723160727044.png)

1.正则表达式 2标志 flag 匹配模式

字面量创建

reg = /a/i

reg.test(str)

大部分字符在正则直接写  

/ab/ 检查ab

/a |b/ 或 检查a或b

[ab]或

-

0-9[]

a-z[]

匹配模式i表示忽略大小写

^除了[]

.除了换行符以外的任意字符

/./

/\w/任意单词

/\W/ 除了单词

/\d 数字

\D

\s空格

\S

\b单词边界



\B



/^开头 ''/

/$结尾''/





量词

/a{20}/

/[a-z]{1,}/

/^ [a-z]{5}$/

ba+表示一个以上的a

*表示有没有都行

? 0-1一次

exec方法

![image-20230718160203261](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718160203261.png)



g表示全局





字符串正则 

split可以根据正则来拆分

直接写

search搜符合正则第一次在字符串出现的位置



replace根据正则替换

match 根据正则匹配符合要求的



matchall 根据正则匹配符合要求的 必须全局 

返回一个迭代器



垃圾回收

gc 

//



DOM

document object model

webapi的一部分

node节点

document代表整个网页

const btn = document.getElementById("id")



btn.innerTex ="";



![image-20230718170628143](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718170628143.png)





![image-20230718171044874](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718171044874.png)



获取元素节点

元素节点对象 

element

如何获取 

document获取 

或者通过document 创建



getelementbyid ()

getelementsbyclassname()

根据元素的class属性值获取 一组元素节点对象

返回的是一个类数组对象 实时更新的集合

当网页添加元素 也会刷新



document.getElementsByTagName()

根据标签获取 一组对象

getElementsByName()



用于表单项



doucument.queryselectorall



![image-20230718172531067](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718172531067.png)

不会实时更新

![image-20230718172756419](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718172756419.png)



查询第一个



![image-20230723174239968](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230723174239968.png)



创建元素节点

![image-20230718172857744](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718172857744.png)





元素的属性 

![image-20230718191459167](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718191459167.png)







![image-20230718191630992](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718191630992.png)





![image-20230718191905267](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718191905267.png)

***  box1.parentnode父节点

文本节点

box1.textcontent

box.innertext

box. innerhtml



属性节点

读取 元素.属性名(注意class属性需要className来读取)

修改:元素.属性名= 值

![image-20230718194310188](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718194310188.png)





事件event



用户和页面发生交互行为

为事件绑定响应函数(回调)完成与用户之间的交互



![image-20230718195037490](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718195037490.png)





2.获取按钮对象 只能蚌一个

get,,,

btn.onclick=function(){}

3.addEventListener()

btn.addEventListener("click",function(){})



![image-20230718200348822](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718200348822.png



![image-20230718200439925](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718200439925.png)



![image-20230718200806496](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718200806496.png)

![image-20230718200818179](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718200818179.png)



window onload

![image-20230718202510757](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718202510757.png)

![image-20230723190324731](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230723190324731.png)





元素修改



![image-20230723211026165](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230723211026165.png)

insertajacentelement

![image-20230718203107066](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718203107066.png)



第一个参数 位置 ,li

![image-20230718203310702](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718203310702.png)



替换 删除



![image-20230718203917258](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718203917258.png)



return false 取消默认行为



![image-20230718210322605](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718210322605.png)





![image-20230718211148453](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230718211148453.png)



![image-20230724134236061](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230724134236061.png)

clonenode(true)节点复制

![image-20230724134910640](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230724134910640.png)



修改样式的方法

元素.style.样式名 = 样式值

有减号 驼峰



读取样式

getcomputestyle(box1)



,伪元素""



属性读取样式

![image-20230719102024583](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719102024583.png)





![image-20230719102203244](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719102203244.png)



![image-20230719102419149](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719102419149.png)





![image-20230719102500080](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719102500080.png)![image-20230719102500430](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719102500430.png)



![image-20230719102845361](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719102845361.png)



![image-20230724141308944](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230724141308944.png)



![image-20230719103254110](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719103254110.png)



操作css

box.classList.add()

![image-20230724141818861](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230724141818861.png)

replace()

contains()是否包含



event事件 对象

onmousemove

事件对象封装了各种

![image-20230719103907427](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719103907427.png)

![image-20230724142326611](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230724142326611.png)



pointerevent

mdn



![image-20230719104852466](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719104852466.png)



事件的冒泡 

子元素 冒泡 父元素 也冒泡

事件向上传到 

![image-20230719105054273](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719105054273.png)





取消冒泡

![image-20230719105308624](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719105308624.png)





![image-20230719105540395](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719105540395.png)

![image-20230724151228159](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230724151228159.png)取消

取消默认行为





事件的委派

事件的捕获

![image-20230719111213580](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719111213580.png)



array.from



bom

浏览器对象模型

完成对浏览器的各种操作

![image-20230719111429903](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719111429903.png)

用来识别浏览器

navigator

location

![image-20230719112747515](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230719112747515.png)



![image-20230724153547324](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230724153547324.png)





定时器

settimeout(执行函数,3000)

cleartimeout



setinterval

循环执行





eventloop 事件循环

调用栈

消息队列

![image-20230724154626638](C:\Users\link\AppData\Roaming\Typora\typora-user-images\image-20230724154626638.png)

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































