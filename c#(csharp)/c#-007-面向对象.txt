面向对象编程的概念
是一种以过程为中心的编程思想
是一种对现实世界理解和抽象的编程方法
把相关的数据和方法组织为一个整体来看待

万物皆对象 ,即用程序来抽象对象 用面向对象的思想来编程

为什么学习面向对象
提高代码复用率
提高开发效率
提高程序可扩展性
清晰的逻辑关系

class 类 

面向对象三大特性
封装 程序语言来形容对象 

类和对象
什么是类 
具有相同特征 具有相同行为
一类事物的抽象 
类是对象的模板
可以通过类创建对象 类的关键词 class

类一般申明在namespace 语句块中
类申明的语法   帕斯卡命名法
class 类名 {
    //特征-成员变量
    //行为-成员方法
    //保护特征-成员属性

    //构造函数和析构函数
    //索引器
    //运算符重载
    //静态成员
}

类对象 

对象是类创建的 
类创建对象的过程 一般成为实例化对象
类对象 都是引用类型的

实例化语法 
类名 变量名; 在栈上有存储空间  不分配内存空间
类名 变量名 = null ;(null代表空)
类名 变量名 = new 类名 (); 栈堆全开
通过new 类名 他们的任何信息都是不一样的不共享
 
成员变量 
申明 在类语句块中 
用来描述对象特征 
可以是任意变量类型 
数量不做限制 
是否赋值根据需求决定 
class Persson {
    string name = "";
    int age ;
    Persson girlFriend ;
    //如果要在类中申明一个和自己相同类型的成员变量时 不能对它进行实例化

}
访问修饰符
public private 
protected 自己和子类才能访问

引用类型的初始值都是null
console.writeline(default(int))

成员方法
也可以叫成员函数 ,用来表现对象行为 
1.在类申明语句块中 
2.用来描述对象的行为的
3.规则与函数申明规则相同
4.受到访问规则修饰符影响
5.返回值参数不做限制
6.方法数量不做限制

成员方法 不要加static关键字
必须实例化出对象 再通过对象类使用  相当于该对象执行了某个行为
受到访问修饰符影响 

构造函数
在实例化对象时 ,会调用的用于初始化的函数
如果不写 默认存在一个无参构造函数

构造函数写法
1.没有返回值
2.函数名必须与类名 相同
3.没有特殊需求时 ,一般都是public的
可以通过this重用构造函数
//访问修饰符 构造函数名 (参数列表):this(参数1,参数2,,,)

4构造函数可以被重载
5.this代表当前调用该函数的对象是自己



析构函数
当引用类型的堆内存被回收时 0会调用该函数
但是c#存在自动垃圾回收机制的gc 所以再见

垃圾回收机制
gc 又叫垃圾回收
过程是在遍历堆上动态分配的所有对象
通过识别它们是否被引用来确定哪些对象是垃圾
什么是垃圾
没有被任何变量 ,对象引用的内容
垃圾就需要被回收释放
算法
引用计数
标记清除
标记整理
复制集合
gc负责堆 内存的垃圾回收
栈上的内存是由系统自动管理的
如何手动gc 
GC.Collect();
注意一般情况 我们不会频繁调用 
都是在loding过场景时 才调用

成员属性 
1.用于保护成员变量 
2.为成员属性获取 和赋值添加逻辑处理
3.解决访问修饰符的局限性
属性可以让成员变量在外部 只能获取 不能修改
或者 只能修改 不能获取

属性命名一般帕斯卡
基本语法
// 访问修饰符 属性类型 属性名 
{
get{
    //可以在返回之前添加一些逻辑规则
    return 
}
set{
    可以在设置之前添加一些逻辑规则
    value 关键字 用于表示 外部传入的值
}
}

使用 
p.

注意保护 属性里可以加密处理

成员属性中 get set 前面可以加访问修饰符

默认不加 ,会使用属性 申明时的访问权限
加的访问修饰符 要低于 属性的访问权限
不能让get set 的访问权限 都低于 属性的访问权限

get set 可以只有一个
只有一个时 不需要加修饰访问符
一般情况下 只会出现 有get的情况

自动属性
作用 外部 能得不能改的特征
如果类中有一个特征是 只希望 外部 能得不能改的 又没什么特殊处理
那么可以直接使用自动属性
 无逻辑的 不能加密

 索引器
让对象可以像数组一样通过索引访问其中元素 ,使程序看起来更直观 更容易编写
语法
访问修饰符 返回值 this [参数类型 参数名 ,参数类型 参数名 ,,,]{
    内部的写法和规则和属性相同 
    get {}
    set{}
}

索引重载 
函数名相同 参数类型 数量 顺序不同


静态成员
静态关键字 static 
用static 修饰的成员变量 方法 ,属性等 称为静态成员
静态成员 的特点 是 直接 用类名 点出使用
class test {
    static public float pi = 3.1415926f
}

为什么可以点使用 
我们要使用的对象 变量 函数 都是要在内存中分配内存空间 的 
之所以要实例化对象 目的就是分配内存空间 在程序 中 产生一个抽象的对象

特点 
程序开始运行 时 就会 分配内存空间 ,所以我们就能直接使用
静态成员和程序同生共死 
只要使用 了它 直到程序结束时内存才会被释放

所以每一个静态成员就会有自己唯一的内存小房间
这让静态成员就有了唯一性
在任何地方使用的都是用的小房间 的内容 改变了它也是改变小房间的内容

成员变量 只能将对象实例化出来后 才能点出来使用 不能无中生有
不能直接使用 非静态成员 否则会报错



非静态函数可以使用静态成员

作用
常用的唯一变量申明
方便别人获取的对象1申明 
静态方法:
常用的唯一的方法申明 比如 相同规则的数学计算相关函数

常量可以理解为特殊的静态
相同点 可以通过类名点出使用

不同点
const 必须初始化 不能修改
const 只能修饰变量 static 可以修饰很多
const 一定是写在访问修饰符后面的 ,static 没有这个要求

静态类 静态构造函数
用static 修饰的类
static class testDStatic
特点
只能包含静态成员,不能被实例化
静态构造函数
在构造函数加上static 修饰的成员变量特点 静态类 和普通类都可以有
不能使用访问修饰符
不能有参数 ,只会自动调用一次


使用 静态类中的静态构造函数
static class StaticClass{
    public static int testInt = 100;
    static StaticClass()
    {console.writeline("静态构造函数");
    }
}
普通类的静态构造函数

class Test {
    publicstatic int testInt = 200;
    static Int (){
        console.writeline("静态构造")
    }
}
作用 1.将常用的静态成员 写在静态类 中 方便使用
静态类不能被实例化 更能体现工具类的唯一性

console就是一个静态类

扩展方法
为现有非静态,变量类型 ,添加新方法 \\
作用 提升程序扩展性 不需要再对象中重新写方法  ,
不需要继承来添加方法  为别人封装的类型写额外的方法

特点
一定 是写在静态类中
一定是个静态类  第一个参数为拓展目标 
第一个参数用this修饰 

访问修饰符 static 返回值 函数名 (this 拓展类名 参数名 ,参数类型 参数名,参数类型 参数名)
static class Tools 
{     //为int拓展了一个成员方法  成员方法是需要实例化对象后 才能使用 value 代表使用该方法的实例化对象
    public static void SpekValue(this int value )
    {
        console.writeline("提供的风格1"+value);
    }
}

使用 
int a = 10;
a.SpekValue();

自定义的类型拓展方法 


运算符重载
让自定义类和结构体
能够使用运算符
使用关键字 operator
一定是一个公共的静态方法 返回值写在operator 前 逻辑处理自定义

作用 自定义类和结构体对象可以进行运算 
注意
条件运算符需要成对实现 一个符号可以多个重载
不能使用 ref out


语法
public static 返回类型 operator 运算符 (参数列表 )

可重载运算 
算数运算  all
逻辑运算  !
位运算  all
条件运算符  

与不可重载运算符 

&& || [] ()  .  三目
内部类和分部类
概念 在一个类中再申明一个类
使用时 要用包裹者点出自己     亲密关系的变现    

分部类  partial 分部描述一个类 
增加程序的扩展性 

分部类可以写在多个脚本文件中  访问修饰符要一致 不能有重复成员 

分部方法 





面向对象七大原则
开口原则 ,依赖倒转原则,里氏替换原则,单一职责原则,接口隔离原则,合成复用原则,迪米特原则
面向对象相关

