泛型 
泛型实现了类型参数化 ,达到代码重用的目的 
通过类型参数化 来实现 同一份代码上操作多种数据类型
泛型想当于类型占位符 定义类或方法时使用替代符代表变量类型
当真正使用类或者方法时再具体指定类型 

泛型 =分类 
泛型类和泛型接口 
class 类名 <泛型占位字母>
interface 接口名 <泛型占位字母>
泛型函数 
函数名 <泛型占位字母>(参数列表)

注意:泛型占位字母可以有多个,用逗号分开


泛型类 和接口 

泛型方法 
普通类中的泛型方法
泛型类中 的泛型方法


不同类型对象的相同逻辑处理就可以选择泛型 
使用泛型可以一定程度避免装箱拆箱

泛型约束 
让泛型有一定的限制 
关键字 where 。
泛型约束 一共有6种 
值类型   where 泛型字母 :struct
引用类型    where 泛型字母 :class
存在无参公共构造函数   where 泛型字母 :new()
某个类本身或者其派生类  where 泛型字母 :类名
某个接口 的派生类型     where 泛型字母 :接口名
另一个泛型类型 本身或者派生类型  where 泛型字母 :另一个泛型字母
约束的组合使用

多个泛型有约束

list 
c#为我们封装好的类
它的本质是一个可变类型的泛型数组
list帮助我们实现了很多方法 
比如泛型数组的增删查改

需要引用命名空间 
增删查改 
遍历 

dictionary
hashtable



顺序存储和链式存储 
数据结构 
数据间的关系规则
常用的数据结构 
堆树图散 数组 栈堆 链表 
线性表 
n个具有相同特性的数据元素的有限序列
顺序存储 
用一组地址连续的存储单元 依次存储线性表的各个数据元素 


链式存储 
单向 双向 循环 
用一组 任意的存储单元 存储线性表中的各个数据元素 
单向列表的实现 
class LinkNode <T> {
public T value ;
LinNode <T> nextNode ;
}
node.nextNode = node2 ;

linkedlist 
是一个可变类型的泛型双向链表
需要引用命名空间 
链表对象需要掌握两个类 一个是链表本身 一个是链表节点表LinkedListNote
linkedList.AddLast(10);
linkedList.AddFirst(20);
在某一个节点之后添加一个节点 
LinkedListNode<int> a = linkedList.Find(20);
linkedList.AddAfter(n,15);

要在某一个节点之前添加一个节点 
linkedList.AfterBefore(n,11);
删除 
lnikedList.RemoveFirst();
linkedList.RemoveLast();


linkedList.Remove(20);
linkedList.Clear();

查 
LinkedListNode<int> first = linkedList.First;
LinkedListNode<int> last = linkedList.Last;
LinkedListNode <int> node  = linkedList.Find(3);
console.Writeline(node.value);
node = lnikedList.Find(3);
console.writeline(node.value);


改 
linkedList.First value = 10;

遍历 

原子弹



泛型栈和泛型队列
using system.collections.Generic
使用上与stack queue 一模一样 

委托
委托是函数的容器 
用来存储传递函数方法 
委托 的本质是一个类 用来定义函数的类型 返回值和参数的类型 
不同的函数方法 必须对应和各自格式一致委托

关键字 delegate 
语法 访问修饰符 deletgate 返回值 委托名 (参数列表);
写在namespace class 中  
定义 自定义委托 
访问修饰符 默认不写 为public 在别的命名空间也能使用 
申明了一个可用用来 存储无参无返回值 函数的容器
这里只是定义 没有使用
delegate void MyFun();
申明不能重名 在同一语句块中 
delegate void MyFun2(int a);
表示用来装载或传递 返回值为int 有一个int 参数的函数 的委托容器规则
使用 定义好的委托

委托常用在 
作为类的成员 
作为参数的参数

委托变量可以存储多个函数 (多播委托)
如何委托存储多个函数

系统定义好的委托
使用系统自带的委托 需要引用 using system ;
无参无返回值 
委托是支持泛型 可以让返回值和参数可变 更方便我们的使用
无参无返回值的

action
Action action =Fun ;
action +=Fun3;
action();

可以指定返回值类型的泛型委托
可以传n个参数  系统提供了1-16个参数
Action<int,string,> action = Fun;
可以穿n个参数 并且有返回值的 系统也提供了16个委托
Func <int ,int> func2 =fun2;
事件 
事件是基于委托的存在 
事件是委托的安全包裹 
让委托 的使用 更具有安全性 
事件 是一种 特殊的变量类型 

申明 :访问修饰符 event 委托类型 事件名 ;
事件的使用 
1.事件是作为成员变量 存在于类中的
2.委托怎么用 事件就怎么用 
事件相对于委托的区别 
不能在类外部赋值 
不能在类外部调用
可以加减去添加移除记录的函数
可以使用函数封装事件
注意 
它只能作为成员存在于接口和类的以及结构体中
事件不能声明临时变量在函数中使用
委托成员变量 用于存储函数的

事件成员变量  用于存储函数的


为什么会有事件 
委托可以在外部赋值 事件不可以在外部赋值的
虽然 不能直接赋值 但是可以 加减 去添加移除记录的函数
委托可以在外部调用的  事件不能在外部调用 只能在类的内部去封装使用
事件是不能作为临时变量 在函数中使用的 ,
防止外部随意置空委托  防止外部随意调用委托  
事件相当于 对委托进行了一次封装  让其更加安全

匿名函数 
没有名字函数 
使用主要配合委托和事件进行使用 
脱离委托和事件 是不会使用匿名函数的

 delegate (参数列表) {
    函数逻辑
 };

 什么时候使用 
 函数中传递委托参数时 
 委托 或事件赋值时

使用 
无参返回 
action a = delegate (){
console.writeline()
}
a();
有参 


有返回值

一般情况下会 作为函数参数传递 或者函数返回值
 参数传递
 返回值

 匿名函数的缺点
添加到委托或事件容器中后 不记录 无法单独移除
因为匿名函数 没有名字 所以没有办法指定移除某一个匿名函数


lambad表达式
可以将 lambad 表达式 理解为匿名函数的简写 

它除了 写法不同外 
使用上和匿名函数一模一样 
都是和委托或者事件 配合使用的



lambad表达式 
(参数列表 ) => {
函数体
}
缺点与匿名函数的缺点同  传参与匿名函数同

闭包
内层的函数 可以引用 包含在它外层的函数的变量 
即使外层函数的执行已经终止 
注意 该变量 提供的值 并非 变量创建的值 而是在父函数范围内的最终值

因为构造执行完毕时 临时变量生命周期被改变了