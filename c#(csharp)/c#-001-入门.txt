c#
环境搭建

using System;
namespace les1 {
  class Program{
    static void Main (static [] args){
      Console.WriteLine("hello,worlds!")
    }
  }
}


控制台打印输入语句
Console.WriteLine("")
Console.Write("")
测测玩家的马儿
Console.ReadLine()
Console.ReadKey();
//检测玩家是否按键,只要按了键盘上的任意键,就会认为输入结束

变量
折叠变量
#region MyRegion
#endredion
它的具体作用是将中间1包裹的代码折叠起来,避免代码太凌乱
本质是编辑器提供给我们的,预处理指令
   它只会在编辑时有用,发布代码和运行代码的时候会被自动删除

 如何申明变量
  变量是可以变化的容器,就是用来存储各种不同数值的容器
  不同的 变量类型可以存储不同的值

固定写法

变量类型 14种
有符号的整形 是能存储正负数包括0的变量类型
sbyte -128 - 127
int   -21e - 21e多
short  -32728 -32767
long  -900万兆 - 900 万兆
无符号的整形 是能存储 0和整数的类型
byte 0-255
uint 0-42亿
ushort 0-65535
ulong  0- 18百万兆
浮点型
float 存储7/8位有效数字 后面加f(为什么加f,因为默认类型是double)
double 存储 15/17位有效数字  
decimal 存储27-28
特殊类型
bool   true false 表示真假
char   用来存储单个字符类型的变量类型
string  字符串 用来存储多个字符的 没有上限

注意:变量的使用和修改 不能无中生有,必须要先声明 才能使用
多个相同类型的变量同时申明
int 1=a , 2=b ;
初始值和变量类型是统一的


变量的本质
变量的存储空间
通过sizeof方法 可以获得 变量类型所占的内存空间 单位字节 
int sbytesize = sizeof(sbyte);
sizeof不能得到string 的大小 因为string 是可变的
2进制取余倒位

变量的命名规则
必须的规则
不能重复
不能数字开头
不能有特殊符号 下划线除外
不能程序关键字命名
不建议使用汉字命名

常用的命名规则
驼峰命名法 首字母小写 之后单词首字母大写
帕斯卡命名法  所有的单词首字母都大写 

常量
常量的申明
固定写法
const 变量类型 变量名 = 初始值 
常量必须初始化
不能被修改
变量申明可以不初始化
之后可以来修改
作用申明一些常用不变的变量

转义字符 
是字符串的一部分 表示一些特殊含义的字符 比如在字符串中表现 单引号 引号 空行
string str = "\'哈哈哈\'";
atr = "\"哈哈哈\"";
换行
\n 
斜杠
\\
警告音
\a 
取消转义字符
string str2 =  @"哈/哈哈";

类型转换
就是不同变量类型之间的相互转换

隐式转换
基本规则不同类型之间自动转换
大范围装小范围,不能小范围装大范围
相同大类型的转换
注意 decimal 没有办法使用隐式转换的
特殊类型不存在隐式

不同大类型之间的转换
无符号装有符号
无符号 

有符号的 
有符号装无符号
前提 无符号的范围小于有符号的
无符号装有符号 不可以  因为负数不能装的 有符号的变量 不能隐式转换无符号的

浮点数可以装任何类型的整数
char 可以隐式转换成 整形 和浮点型  
其实char 是转为了int类型 然后int类型又转换成了其他类型
所以short byte 等存储范围小于int的类型 无法表现为隐式转换
string无法隐式转化

显式转换
手动处理强制转换

括号强转
一班情况下 ,将高精度的类型转为低精度类型
语法 : 变量类型 变量类型 = (变量类型)变量;
相同大类型的转换
有符号 无符号
short = (short)long;
括号强转可能会出现范围异常
浮点 
略
无符号与有符号之间
浮点与整形强转 直接抛弃小数点后面的小数
int = (int) float
char 支持强转
bool和string 不能通过括号强转

parse法
把字符串转换 ,注意 字符串必须能转换成对应类型以及对应范围 否则保错
语法 变量类型.parse("字符串")

convert法
更准确的将各个类型进行转换 
语法 Convert.To目标类型(变量或常量)
填写的变量和常量必须正确否则报错
int a =Convert.ToInt32("");
可以把bool类型可以转换成数值类型 true 对应1 FALSE 对应0

image.png
其实没什么要注意的
16 short   32 int  64 int long  有符号无符号同理
float single  
bool boolean

其他类型转string 
拼接打印
语法 : 变量.toString();

异常捕获
作用 
避免代码报错程序卡死
基本语法 
try {
  希望进行异常捕获的代码放入try 如果try报错不会让程序卡死 

}
catch (Exception e ) 具体报错跟踪 通过e得到具体的错误信息{
  会执行catch来捕获异常
}
//可选部分 
finally {
  最后执行代码, 不管有没有出错 ,都会执行
}
