继承 复用封装对象的代码
继承的基本规则 
一个类a继承一个类b
类a将会继承 类b的所有成员 

a类将会拥有b类的所有特征和行为

被继承的类
称为父类 基类 超类 
继承的类 
称为子类 派生类

子类可以有自己的特征和行为 
特点 单根性 子类只能有一个父类 
传递性 子类可以间接继承父类的父类

基本语法 

class 类名 : 被继承的类名 
{

}
访问修饰符的影响 
protected 保护 
外部不能用 内部和子类可以用

子类与父类的同名成员
允许存在同名成员
但是不建议

里氏替换原则 
概念 任何父类出现的地方 子类都可以替代 
语法 表现 父类 容器 装子类对象 ,因为 子类 对象 包括了父类的所有内容 
作用 :方便进行对象存储和管理  

基本实现 
class GameObje
class Player:GameObje 
 {
        public void  PlayArk()
        {
            console.writline ();

        }
        public void  MonsterArk()
        {
            console.writline ();
            
        }
        public void  BossArk()
        {
            console.writline ();
            
        }
        //用父类容器 装载子类对象
        GameObje Player = new Player();
 }

 is和as
 判断一个对象 是否执行类对象 
 返回值 bool 是为真 不是为假 
 as 将一个 对象 转换为指定类对象 
 返回值 :指定 类型对象 
 成功返回 执行类型对象 失败 返回null 

 father  f = new son ();
 if (f is son) {
    (f as son ).Speak;
 }
 基本语法 
 类对象 is 类名 该语句块  会有一个bool返回值 true和false 
类对象 as 类名 该语句块 会有一个对象返回值 对象和null

继承中的构造函数 

基本概念 
当申明一个子类对象时  先执行 父类的构造函数 再执行子类的构造函数 
注意 :
1.父类 的无参构造 很重要 
2.子类可以通过base关键字 代表父类 调用父类构造
继承中的构造函数的执行顺序
父类的父类的构造 -->...父类构造 -->子类构造

父类的无参构造函数很重要
子类实例化时,默认调用父类无参构造 ,所以如果父类无参构造被顶掉 会报错

通过base调用指定父类构造
:base(i)
万物之父 和装箱拆箱 
基本概念 
关键字 object 
概念 
object是所有类型 的基类  它是一个类 (引用类型)
作用 
可以利用里氏替换原则 用object 容器装所又对象
可以用来 表示不确定 类型 ,作为 函数参数类型 

使用 
装箱拆箱
发生条件 用 object 存值类型 再把object 转为 值类型 

object c = "1234";
string i = c.Tostring ();
string i1 = c as string ;
object c = new int [10] ;
int[] arr = c as int [] ;
装箱 吧值类型 用引用类型 存储 
栈内存会迁移 到堆内存中 
拆箱 
把引用类型存储的值类型 取出来 
堆内存 会迁移到栈内存中 

好处 :不确定类型 时 可以方便 参数 的存储 和传递
坏处 : 存在 内存迁移 增加性能消耗


密封集
基本
使用 sealed 蜜封关键字 修饰的类 
作用让类无法再被继承
主要作用 就是不允许最底层子类被继承 
可以保证程序的规范性 安全性


多态 同样行为的不同表现
让继承同一父类的子类们 在执行相同方法时有不同的表现
主要目的
同一父类的对象 执行 相同行为 (方法)有不同的表现
    解决问题
让同一个对象 有唯一行为的特征 

vob
编译时的多态 函数重载 
运行时的重载 vob 抽象函数 接口 
v virtual 虚函数 
o override 重写 
b base 父类 
代表父类 可以通过base来保留父类的行为

虚函数可以被子类重写


抽象类
被抽象关键字abstract修饰的类 
特点 不能被实例化 的类 
可能包含抽象的方法 
继承 抽象类 必须重写其抽象方法 

//抽象类中 封装的所有知识点都可以在其中书写
//可以在抽象类中写抽象函数
抽象不能被实例化 
但是可以遵循里氏替换 原则 用父类容器装子类



抽象函数
又叫纯虚方法 
用abstract 关键字修饰的方法 
特点 只能在抽象类中 申明 
没有方法体 不能是私有 的 继承后必须实现 用override重写

虚方法和抽象方法 都可以被子类无限的去重写

接口 
概念
接口是行为的抽象规范 也是一种自定义类型  关键字 interface 
接口的规范 
1.不包含成员变量
2.只包含方法 ,属性,索引器,事件 
成员不能被实现 
成员可以不用写访问修饰符 不能是私有的 
接口不能继承类 但是 可以继承另一个接口

接口的使用规范 
类可以继承多个接口 
类继承接口后 ,必须实现接口中所有成员 
特点 
它和类的申明类似 
接口 是用来继承的 
接口不能被实例化 但是 可以作为容器存储对象

接口的申明  
语法 
interface 接口名 
{

}
一句..话记忆 接口是抽象行为 的基类 
接口命名规范 帕斯卡前面加个I
接口的使用 

接口是用来继承的 
类可以继承1个类 n个接口 
继承了接口后 必须实现其中的内容 并且必须是public 
实现的接口的函数 可以加v再在子类重写 
接口也遵循里氏替换原则 

接口 可以继承接口 
接口继承 接口时 不需要实现 
待类继承接口后 类自己去实现所有内容

显示实现接口 
当一个类继承两个接口 ,但是接口中存在着同名方法时 
注意 显示实现接口时 ,不能写访问修饰符 
//显示实现接口 用  void 接口名 .行为名

蜜封方法 
用密封关键字sealed修饰的重写函数 
作用 让虚函数或者抽象方法 之后 不能再被重写 
特点与override 一起出现
