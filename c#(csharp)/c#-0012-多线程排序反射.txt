list排序 
lsit 自带的排序方法 
list.Sort();升序
自定义类排序 
继承排序接口 :IComparable<Item>
返回值的含义
小于0放在对象的前面
等于零
原地不变
大于零
放在传入对象的后面


通过委托函数进行排序
shopItems.Sort(SortShopItem);
public int SortShopItem(ShopItem a, ShopItem b ){

if (a.id>b.id)
{

}
return 0;返回值规则与上面一样
}

协变
和谐的变化 自然的变化 
因为里氏替换原则 父类 可以装子类 
所以子类变父类 
比如 string 变成object  感受是和谐的

逆变 
逆常规的变化 不正常的变化 
因为里氏替换原则 父类可以装子类 但是子类不能装父类 

所以父类装子类 比如 object 变 string  
感受是不和谐的 

协变与逆变是修饰泛型 的 
协变 out  
逆变 in 
用于在泛型中 修饰泛型字母的 只有泛型接口 和泛型委托能使用


作用 :
用out 修饰的泛型 只能作为 返回值 
用in 修饰的泛型 只能作为参数 

2.结合里氏替换原则
协变 父类总是能被子类替换 
逆变 父类 总是能被子类替换

多线程 

进程是计算机中的程序关于某数据集合上的一次运行活动 
是系统进行 资源分配和调度的基本的单位 ,是操作系统结构 的基础 
打开一个 应用程序就是操作系统上开启了一个一个进程 
进程之间可以相互独立运行 互不干扰 
进程 之间 也可以相互访问和操作

线程 操作系统能够进行 运算调度的最小单位 
它被包含在进程之中 是进程 中的实际运作单位 
一条线程 指的是进程中单一顺序的控制流 ,一个进程中 可以并发 多个线程
我们目前写的程序 都在主线程中 

简单理解线程 代码从上到下 运行的一条管道
什么叫多线程 
我们可以通过代码 开启新的线程 
可以同时运行代码的多条管道 就叫多线程 

语法 
线程类 thread 
需要引用命名空间 
using system.threading;
1.申明一个新线程  注意 线程执行的代码 需要封装到一个函数中 
新线程执行的逻辑被封装代码逻辑块
thread  t =new thread(newthreadlogic);
2.启动线程 
t.start();
3.设置为后台线程
当前台线程都结束了的时候,整个程序也就结束了 即使后台线程正在运行 
后台线程不会防止 应用程序的进程诶终止掉
如果不设置后台线程 可能导致进程 无法正常关闭 
t.isbackground = true;
4.关闭释放一个多线程 
如果开启的线程中不是死循环 是能够结束的逻辑 那么 不用刻意的去关闭它
如果是死循环 想要终止这个线程 
1.死循环中的 bool标识 
t= null;
全局创死局部 特洛伊
2.通过线程提供的方法  (注意在.net core 版本中无法终止会报错)
//t.abort();
//t= null;

线程修眠
thread.sleep ();
让线程修眠多少毫秒 1s = 1000ms
在哪一个线程执行就是修眠哪一个

线程之间共享数据
多个线程使用的内存是共享的 都是属于该应用程序的进程 
所以要注意 当多线程 同时操作同一片内存区域时可能出现的问题
可以通过加锁 的形式避免问题 

lock当我们在多个线程想要访问同样的东西 ,进行逻辑处理时
为了避免不必要的逻辑执行的差错 
lock (引用类型对象){

}
task.Run ();
async
awit 等待任务完成  异步方法
会影响线程之间的效率

可以使用多线程专门处理一些复杂的逻辑  比如寻路 网络通信 


预处理器指令 
什么是编译器 
它用于将源语言程序翻译为目标语言程序 
源语言程序 某种程序设计语言 
目标语言程序 二进制数表示的伪机器代码写的程序

什么是预处理器指令 
预处理器指令 指导编译器 在实际编译开始之前 对信息进行预处理 
预处理指令 都是以#开始的 
预处理器指令表示语句 ,所以 它们 不以分号 结束 
折叠代码块命令 就是预编译器指令 

常见的预编译器指令
#define
定义一个符号 ,类似一个没有值的变量 
#undef 
取消define定义的符号 让其失效 
两者都是写在脚本文件最前面的 
一般配合 if指令 使用或配合特性 
2 
#if 
#elif 
#else 
#endif 
和if 语句控制一样 用于高速编译器进行编译代码的流程控制
3
#warning
#error 
告诉编译器 报警告还是报错 
一般配合if使用
反射
程序集 是经由编译器 编译得到 的 供进一步编译执行的那个中间产物
在windows系统 它 一般表现为后缀为.dll 库文件 或者是 .exe 可执行文件 的格式

元数据
用来描述数据的数据 
程序中的类 类中的函数变量 就是  程序的元数据
他们保存在程序集中
反射的概念
程序在运行时 可以查看其他程序集 或者自身的元数据 
一个运行的程序查看本身或者其他程序的元数据 的行为就叫反射

程序在运行时 反射可以得到 其他程序集或者自己程序集的代码的各种信息
类变量函数对象 等等 实例化 执行操作 他们;


反射的作用
因为反射可以在程序编译后获得信息 所以 它提高了程序的拓展性和灵活性 
1.程序运行是得到所有元数据 ,包括元数据的特性 
2.程序运行时 实例化 操作对象 
3.程序运行时创新对象 ,用这些对象执行任务;
语法相关 
type 
type {类的信息类}
它是反射功能 的基础 
它是访问元数据的主要方式
使用type的成员 获取有关类型声明的信息 
有关类型 的成员 (如构造函数 ,方法 字段 属性 和类的事件)

获取type 
万物之父object 中的gettype () 可以获取对象 的type 

2. 通过typeof 关键字  传入类名 也可以得到 对象 type 
3.通过类的名字 也可以获取类型 
注意 类名 必须包含 命名空间 不然找不到


获取类中的所有公共成员 
首先得到type 
然后得到所有公共成员 
需要引用命名空间 using system.reflection;
memberinfo []
获取类的公共构造函数并调用 
ConstructInfo [] ctors = t.GetConstructors();
1.获取所有构造函数 
2.获取一个构造函数 并执行 
得构造函数传入type 数组 数组中内容按顺序是参数类型 
执行构造函数传入 object数组 表示按顺序 传入的参数
2-1.得到无参构造
constructorinfo info = t.getConstructor(new Type[0]);

执行无参构造 
Test obj = info.Invoke(null) as test;
console.writeline (obj.j)
2-2.得到有参构造 
constructorinfo info2 = t.getconstructor(new Type [] {Typeof(int)});
obj = info2.Invoke(new object [] {2}) as Test;


获取 类的公共成员变量 
得到所有的成员变量 
FieldInfo [] FieldInfos = t.GetFields();
得到指定名称的公共成员变量
 FieldInfo info = t.GetField("j");
通过反射获取 和设置 对象 的值
3-1 通过反射获取对象 的某个变量的值 
console.writeline (info.getvalue(test));
3-2 通过反射设置指定 对象的某个变量的值
info.setvalue(test,100);
获取类的公共成员方法 
通过type 类中的getmethod方法 得到类中 的方法 
method 是方法反射信息
type strType = typeof(string);
1.如果 存在方法重载 用 type 数组表示参数类型 
NethidInfo [] methods = strType.GetMethods();
MethodInfo substr = strType.GetMethod("substring",new Type [] {typeof (int) ,typeof(int) );
2调用该方法  
注意 : 如果是静态方法 invoke 中的第一个参数传null即可
string str = ""
 object obj = substr.Invoke(str, new object [] {7,5});


assembly 



程序集类 主要用来加载 其他程序集 加载后 
才能用type  来使用 其他程序集中的信息 
如果想要使用 不是自己程序集的内容 需要先加载程序集 
比如dll  简单的把库文件看成一种代码仓库
它提供 给使用者 一些可以 直接拿来用的变量 
函数或者类 

三种加载程序集的函数 
一般用来加载同一文件下的其他程序集 
assembly asembly2 = assembly.load("程序集");
一般用来加载不在同一文件下的其他程序集 
assembly asembly = assembly.loadfrom("包含抽象集清单的文件的名称或路径");
assembly asembly3 = assembly.loadfile("要加载的文件的完全限定路径");
1.先加载一个指定的程序集 
Assembly asebly = Assembly.LoadFrom("@给路径取消转义")
2.再加载程序集中的一个类对象 之后才能使用反射
type icon = assembly.gettype("namespace.类对象"); 
Memberinfo [] members = icon.getMembers();


3.类库工程的创建

activator 
用于快速实例化对象的类 
将type 对象 快捷实例化为对象 
先得到type 然后快速实例化一个对象
Test test =typeof (test);
无参构造 
test testobj = Activator.CreateInstance(testType) as Test ;


特性 
特性 是一种 允许 我们向程序的程序集 添加元数据 的语言结构
它是用于保护程序结构信息的某种特殊类型 的类 
特性提供功能强大的方法以将声明信息 与 c#代码相关联 
特性与程序实体关联后 即可 在运行 时使用 反射查询特性信息 

特性 的目的 是告诉编译器 把程序结构 的某组元数据嵌入程序集中 
它可以放置在几乎所有的声明中 

特性的本质是个类 

继承特性的基类 Attribute
class my :attribute
{
	
}
使用=

基本语法 [特性名 (参数列表)]
本质上 就是中调用特性类 的构造函数 
写在 类 函数 变量的上一行 表示他们具有的该特性信息

参数一 特性的类型 
参数二 代表是否搜索继承链
if (t.isdefined(typeof(my),false)){
}

object []  obj =t.getcustomattribute(true);
限制自定义特性的适用范围 
三个关键字

系统自带的特性
过时特性 obsolete 
用于提示用户使用的方法已经过时 建议使用新方法
调用者信息特性 



迭代器 
是程序设计的软件设计模式  
提供一个方法顺序访问 一个聚合对象 的各个元素 
而不爆漏内部标识

如果想要foreach遍历就必须要实现迭代器

关键接口 IEnumerator IEnumerable 
命名空间 using system.collections;

foreach (int item in list){
}

特殊语法 



//排尼玛
排序进阶
插入排序 
希尔排序 
归并排序 