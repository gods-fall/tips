命名空间 
命名空间的使用 
命名空间 是用来组织重用代码的 
作用 一个工具包 类就是一件一件工具 都是申明在命名空间中的

基本语法 
namespace 命名空间名  {
    类 
    类 
}
不同命名空间的相互使用 
需要引用命名空间或指明出处
        using MyGame;
       MyGame. 

不同命名空间允许有同名类 
好理解  工具包不一样
命名空间可以包裹命名空间 
好理解
关于修饰类的访问修饰符
public 
interface 
abstract 
sealed 
partial 
结构体与类的区别
最大的区别是存储空间上 的 因为结构体是值 类是引用
因此他们的存储位置一个在栈上一个在堆上 
结构体和类使用上很类似 结构体 甚至可以用面向对象的思想来形容一类对象
由于结构体不具备继承特性 所以它不能使用 protected保护访问修饰符

细节区别
结构体是值类型 类是引用类型 
结构体存在栈中 类存在堆中 
结构体成员不能使用protected访问修饰符 
成员变量申明不能指定初始值 
不能申明无参构造函数 
不能申明析构函数
不能被继承
不能被静态static修饰 不存在静态结构体 
不能在自己内部申明 和自己一样的结构体
而类可以

结构体申明有参构造函数之后 ,无参构造不会被顶掉
结构体需要在构造函数中1 初始化所有成员变量 而类随意

结构体特别之处

结构体可以继承接口 因为接口是行为的抽象

如何选择结构体和类

想要用继承和多态时 直接淘汰结构体 比如 玩家怪物等
对象时数据结构时 优先考虑结构体 比如位置坐标
从值类型和引用类型赋值时的区别考虑 
比如经常被赋值传送的对象 并且 改变赋值对象 原对象不想跟着变化 就用结构体 比如坐标向量旋转等等

//抽象类和接口区别
万物之父的方法
object 中的静态方法 

静态方法 Equals 判断两个对象是否相等
最终的判断 ,交给左侧对象的Equals 方法 不管值类型都会按照左侧对象Equals方法的进行比较
静态方法ReferenceEquals
比较两个对象是否是相同的引用 主要是用来比较引用类型的对象
值类型对象返回值始终是false 

object 中的成员方法 

普通方法 GetType 
该方法在反射相关知识点中 是非常重要的方法 
主要作用 就是获取对象运行时的类型Type
通过type结合反射相关知识可以做很多关于对象的操作

普通方法MemberwiseClone
该方法用于获取对象 的浅拷贝对象 ,即会返回一个新对象
但是新对象中的引用变量会和老对象中一致

object中的虚方法
虚方法 Equals 
默认实现还是比较两者是否为同一个引用,即相当于ReferenceEquals
虚方法 GetHashCode 
该方法 是获取对象的哈希码

虚方法 ToString 
该方法用于返回当前对象代表的字符串

string 知识点
字符串指定位置的获取
console.writeline(str[0]);
转为char数组
 char [] char = str.ToCharArray();

字符串本质是char数组

字符串拼接
Format 

正向查找字符位置

str.IndexOf("tang");

反向查找
index = str.LastIndexOf("唐老师")

移除指定位置后的字符
str.Remove(4);
执行两个参数  参数1 开始位置 参数2 字符个数

替换指定字符串 
str.Replace(,);

大小写转换
str.ToUpper();
str.Lower();

字符串截取
//截取指定位置开始之后的字符串
str.Substring(2);
不会自动判断自动越界

字符串切割
str = "1,2,3";
string [] strs = str.Split(',');

Stringbuilder
是c#提供的一个用于处理字符串的公共类

主要解决问题是

修改字符串而不创建新的对象 需要频繁修改和拼接的字符串可以使用它 可以提升性能
使用前需要引用命名空间 

初始化 直接指明内容
StringBuilder str = new StringBuilder("1212324234");

容量 
存在一个容量 的问题  每次往里面增加时 会自动扩容 
//获得容量 
str.Capacity

//获得字符长度 
str.Length

增删查改替换
str.Append/AppenFormat

str.Insert
    Remove
    clean 
    打印第几位
    数组修改
    Replace

